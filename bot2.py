import telebot
import random
import time
import threading
import json
import os
import re
daily_top5 = []
TASK_FILE = 'task.json'
current_task = "‚ùóÔ∏è–ó–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
current_task_reward = 50  # –°–∫—ñ–ª—å–∫–∏ PulseToken –¥–∞–≤–∞—Ç–∏ –∑–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è


# –û—Å—å —Ç—É—Ç:
current_task = "–í–∏–∫–æ–Ω–∞–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª X —ñ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."

TOKEN = '7102389575:AAGNcHAzhyut7t-pL0CO0U8UFw3UtDaExlw'
bot = telebot.TeleBot(TOKEN, parse_mode='HTML')

sponsor_channels = [
    '@Vsi_PROMO',
    '@casinomania_official',
    '@Jackpot_Pulse',
    '@gospodispin',
    '@Lucky_Club_777',
    '@PROMO_OT_SAINT'
]
ADMIN_GROUP_ID = -1002729364136
ADMIN_ID = 7262164512
DATA_FILE = 'users_data.json'
PROMO_FILE = 'promo_codes.json'

jokes = [
    "–§–∞—Ä—Ç –ø–æ—Å—Ç—É–∫–∞–≤ ‚Äî –Ω–µ –ø—Ä–∏–∫–∏–¥–∞–π—Å—è, —â–æ —Ç–µ–±–µ –Ω–µ–º–∞—î –≤–¥–æ–º–∞.",
    "–ö—Ä–∞—â–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—â–∞—Å—Ç–∏—Ç–∏, –Ω—ñ–∂ —Å—Ç–æ —Ä–∞–∑—ñ–≤ –ø–æ—à–∫–æ–¥—É–≤–∞—Ç–∏.",
    "–§–∞—Ä—Ç ‚Äî —Ü–µ –∫–æ–ª–∏ –∑–∞ —Ç–µ–±–µ –≥—Ä–∞—é—Ç—å –Ω–∞–≤—ñ—Ç—å –ª—ñ—Ö—Ç–∞—Ä—ñ –Ω–∞ –≤—É–ª–∏—Ü—ñ.",
    "–Ø–∫—â–æ –Ω–µ –ø–æ—â–∞—Å—Ç–∏–ª–æ, –ø–æ—á–µ–∫–∞–π ‚Äì —Å–∫–æ—Ä–æ –ø–æ–≤–µ–∑–µ!",
]

def is_admin(message):
    return (message.from_user.id == ADMIN_ID) or (message.chat.id == ADMIN_GROUP_ID)

def load_promos():
    try:
        with open(PROMO_FILE, 'r') as f:
            return json.load(f)
    except:
        return {}

def save_promos(data):
    with open(PROMO_FILE, 'w') as f:
        json.dump(data, f, indent=4)


if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r') as f:
        users_data = json.load(f)
        users_data = {int(k): v for k, v in users_data.items()}
else:
    users_data = {}

if os.path.exists(TASK_FILE):
    with open(TASK_FILE, 'r', encoding='utf-8') as f:
        task_data = json.load(f)
        current_task = task_data.get("text", "‚ùóÔ∏è–ó–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        current_task_reward = task_data.get("reward", 50)

def save_data():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump({str(k): v for k, v in users_data.items()}, f, indent=4, ensure_ascii=False)

def update_daily_top5():
    global daily_top5
    sorted_users = sorted(users_data.items(), key=lambda x: x[1]['balance'], reverse=True)
    daily_top5 = sorted_users[:5]

main_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
main_keyboard.row('üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç', 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
main_keyboard.row('üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ', 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
main_keyboard.row('üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å', 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
main_keyboard.row('‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤', 'üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')
main_keyboard.row('üíº –ë–∞–ª–∞–Ω—Å / –ü—Ä–æ–º–æ–∫–æ–¥', 'üìù –ó–∞–≤–¥–∞–Ω–Ω—è')  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–¥–∞–Ω–Ω—è

welcome_text = """<b>üé∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –≤ Jackpot Pulse!</b>

<b>‚úÖ –©–æ —Ç—É—Ç –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è:</b>
‚Ä¢ üéÅ –©–æ–¥–Ω—è –∑–∞—Ö–æ–¥–∏—à ‚Üí –æ—Ç—Ä–∏–º—É—î—à –±–æ–Ω—É—Å PulseCoins (15‚Äì100)
‚Ä¢ üÉè –í—ñ–¥–∫—Ä–∏–≤–∞—î—à –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∏ ‚Üí –ª–æ–≤–∏—à –ø—Ä–∏–∑–∏
‚Ä¢ üëØ –ó–∞–ø—Ä–æ—à—É—î—à –¥—Ä—É–∑—ñ–≤ ‚Üí —â–µ –±—ñ–ª—å—à–µ PulseCoins
‚Ä¢ üèÜ –£—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à–∞—Ö —Ä–µ–∞–ª—å–Ω–∏—Ö –≥—Ä–æ—à–µ–π

<b>‚ö†Ô∏è –©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏.</b>
<i>‚ö†Ô∏è –Ø–∫—â–æ –≤—ñ–¥–ø–∏—Å—É—î—à—Å—è –≤—ñ–¥ –±—É–¥—å-—è–∫–æ–≥–æ –∫–∞–Ω–∞–ª—É ‚Äî –≤—Å—ñ –±–æ–Ω—É—Å–∏ —Ç–∞ —É—á–∞—Å—Ç—å –∞–Ω—É–ª—é—é—Ç—å—Å—è!</i>
<b>üî• –ù–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏ —Å–≤—ñ–π —à–ª—è—Ö –¥–æ –¥–∂–µ–∫–ø–æ—Ç—É!</b>"""


@bot.message_handler(commands=['start'])
def start_handler(message):
    user_id = message.from_user.id
    ref_id = None

    if user_id not in users_data:
        users_data[user_id] = {
            'balance': 0,
            'pulse_token': 0,
            'last_bonus': 0,
            'last_card': 0,
            'streak': 0,
            'referrals': 0,
            'referrals_today': 0,
            'tickets': 0,
            'last_active': int(time.time()),
            'referral_from': None,
            'lottery_participation': False,
            'last_task_done': 0,
            'phone_number': None,
            'last_unsubscribed_time': 0,
            'last_task_request': 0
        }

    if message.text:
        args = message.text.split()
        if len(args) > 1:
            try:
                ref_id = int(args[1])
            except:
                pass
        elif len(message.text) > 6:
            try:
                ref_id = int(message.text[6:])
            except:
                pass

    # ‚úÖ –†–ï–§–ï–†–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê ‚Äî –¢–£–¢ –í–°–ï–†–ï–î–ò–ù–Ü –§–£–ù–ö–¶–Ü–á
    if ref_id and ref_id != user_id and users_data[user_id].get('referral_from') is None:
        users_data[user_id]['referral_from'] = ref_id
        if ref_id in users_data:
            users_data[ref_id]['referrals'] += 1
            users_data[ref_id]['referrals_today'] = users_data[ref_id].get('referrals_today', 0) + 1
            users_data[ref_id]['balance'] += 20

            try:
                bot.send_message(
                    ref_id,
                    f"<b>üéâ –£ —Ç–µ–±–µ –Ω–æ–≤–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª: {message.from_user.first_name} (@{message.from_user.username})</b>\nüí∞ +20 PulseCoins!"
                )
            except:
                pass

    users_data[user_id]['last_active'] = int(time.time())
    save_data()

    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    if not users_data[user_id].get('phone_number'):
        request_contact_btn = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        contact_button = telebot.types.KeyboardButton("üì≤ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)
        request_contact_btn.add(contact_button)
        bot.send_message(message.chat.id,
            "üì≤ <b>–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª–∏—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏.</b>\n–¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É.",
            reply_markup=request_contact_btn)
        return

    # ‚úÖ –Ø–∫—â–æ –Ω–æ–º–µ—Ä –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard)
    bot.send_message(message.chat.id, "<b>üîó –ù–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_channels_buttons())



def get_channels_buttons():
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    return markup


def check_subscriptions(user_id):
    try:
        for channel in sponsor_channels:
            member = bot.get_chat_member(channel, user_id)
            if member.status in ['left', 'kicked']:
                return False
        return True
    except Exception as e:
        print("Subscription check error:", e)
        return False

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    user_id = message.from_user.id
    contact = message.contact

    if contact.user_id != user_id:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ —Å–∞–º–µ —Å–≤—ñ–π –Ω–æ–º–µ—Ä.")
        return

    phone = contact.phone_number

    # ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ –º–∞—î –±—É—Ç–∏ —Ç—É—Ç, –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    if not re.match(r'^\+?\d{1,4}\d{6,14}$', phone):
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
        return

    users_data[user_id]['phone_number'] = phone if phone.startswith("+") else f"+{phone}"
    save_data()

    bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä –ø—Ä–∏–π–Ω—è—Ç–æ! –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.", reply_markup=main_keyboard)
    bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard)
    bot.send_message(message.chat.id, "<b>üîó –ù–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏:</b>", reply_markup=get_channels_buttons())


@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def callback_check_subs(call):
    user_id = call.from_user.id
    if check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚úÖ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ!")
    else:
        bot.answer_callback_query(call.id, "‚ùå –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏.")
        bot.send_message(user_id, "<b>‚ö†Ô∏è –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –≤—Å—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏. –ü—ñ–¥–ø–∏—à–∏—Å—å, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –±–æ–Ω—É—Å–∏.</b>")


@bot.message_handler(func=lambda m: m.text == 'üéÅ –©–æ–¥–µ–Ω–Ω–∏–π —Ñ–∞—Ä—Ç')
def daily_bonus(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    now = int(time.time())
    last = users_data[user_id]['last_bonus']
    users_data[user_id]['last_active'] = now

    if now - last < 86400:
        bot.send_message(message.chat.id, "<b>üïê –¢–∏ –≤–∂–µ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞–≤ —Ñ–∞—Ä—Ç! –ó–∞–≤—ñ—Ç–∞–π –∑–∞–≤—Ç—Ä–∞ üòâ</b>", reply_markup=main_keyboard)
    else:
        bonus = random.randint(15, 100)
        users_data[user_id]['balance'] += bonus
        users_data[user_id]['last_bonus'] = now
        users_data[user_id]['streak'] += 1
        save_data()
        bot.send_message(message.chat.id, f"<b>üéâ –ü–ª—é—Å —É–¥–∞—á—ñ {bonus} —Ñ–∞—Ä—Ç—ñ–≤! üéâ</b>", reply_markup=main_keyboard)
        bot.send_message(message.chat.id,
            f"<b>üîÆ –ü—É–ª—å—Å —É–¥–∞—á—ñ –±‚Äô—î—Ç—å—Å—è —Ä—ñ–≤–Ω–æ üëä</b>"
            f"<b>+{bonus} PulseCoins üí∏</b>\n"
            f"<b>üî• –°—Ç—Ä—ñ–∫:</b> {users_data[user_id]['streak']} –¥–Ω—ñ(–≤)",
            reply_markup=main_keyboard)


@bot.message_handler(func=lambda m: m.text == 'üÉè –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞')
def fart_card(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    now = int(time.time())
    last_card = users_data[user_id].get('last_card', 0)
    if now - last_card < 86400:
        bot.send_message(message.chat.id, "<b>‚è≥ –§–∞—Ä—Ç-–∫–∞—Ä—Ç–∫—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ª–∏—à–µ —Ä–∞–∑ –Ω–∞ –¥–æ–±—É. –ó–∞—Ö–æ–¥—å –∑–∞–≤—Ç—Ä–∞!</b>", reply_markup=main_keyboard)
        return

    users_data[user_id]['last_card'] = now
    users_data[user_id]['last_active'] = now

    outcomes = [
        ("üí∞ <b>+50 PulseCoins!</b>", 50),
        ("üéü <b>–ö–≤–∏—Ç–æ–∫ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à!</b>", 0),
        (f"ü§£ <i>{random.choice(jokes)}</i>", 0),
        ("ü§∑‚Äç‚ôÇÔ∏è <b>–ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–ø–∞–ª–æ —Ü—å–æ–≥–æ —Ä–∞–∑—É. –°–ø—Ä–æ–±—É–π —â–µ!</b>", 0)
    ]
    text, coins = random.choice(outcomes)
    if "–ö–≤–∏—Ç–æ–∫" in text:
        users_data[user_id]['tickets'] += 1
    if coins > 0:
        users_data[user_id]['balance'] += coins
    save_data()
    bot.send_message(message.chat.id, f"<b>üÉè –¢–≤–æ—è —Ñ–∞—Ä—Ç-–∫–∞—Ä—Ç–∫–∞ –ø–æ–∫–∞–∑—É—î:</b>\n\n{text}", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üìä –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å')
def my_profile(message):
    user_id = message.from_user.id
    data = users_data.get(user_id)
    if data:
        users_data[user_id]['last_active'] = int(time.time())
        save_data()
        bot.send_message(message.chat.id,
            f"<b>üìä –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n"
            f"ü™ô PulseCoins: {data['balance']}\n"
            f"üìÜ –°—Ç—Ä—ñ–∫: {data['streak']} –¥–Ω—ñ(–≤)\n"
            f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: {data['referrals']}\n"
            f"üéü –ö–≤–∏—Ç–∫—ñ–≤ –Ω–∞ —Ä–æ–∑—ñ–≥—Ä–∞—à: {data['tickets']}",
            reply_markup=main_keyboard)
    else:
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ü—Ä–æ—Ñ—ñ–ª—å —â–µ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞—Ç–∏—Å–Ω–∏ /start</b>", reply_markup=main_keyboard)

@bot.message_handler(func=lambda m: m.text == 'üèÜ –†–æ–∑—ñ–≥—Ä–∞—à—ñ')
def lottery(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    tickets = users_data.get(user_id, {}).get('tickets', 0)
    info = (
    "<b>üèÜ Jackpot Pulse ‚Äî –†–æ–∑—ñ–≥—Ä–∞—à—ñ</b>\n"
    "üéÅ –ü—Ä–∏–∑: 500 –≥—Ä–Ω - (5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ –ø–æ 100 –≥—Ä–Ω)\n"
    "üìÜ –©–æ–Ω–µ–¥—ñ–ª—ñ –æ 19:00\n"
    "üî∏ –Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:\n"
    "‚Ä¢ 1000 PulseCoins\n"
    "‚Ä¢ –∞–±–æ 25 –¥—Ä—É–∑—ñ–≤\n"
    "‚Ä¢ –∞–±–æ <b>15 –∫–≤–∏—Ç–∫—ñ–≤</b> üéü\n"
    f"üéü –£ —Ç–µ–±–µ: {tickets} –∫–≤–∏—Ç–∫—ñ–≤\n"
    "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!"
)


    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å", callback_data="join_lottery"))
    bot.send_message(message.chat.id, info, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "join_lottery")
def handle_join_lottery(call):
    user_id = call.from_user.id
    user = users_data.get(user_id)
    if not user:
        bot.answer_callback_query(call.id, "‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return

    if user['tickets'] >= 15:
        user['tickets'] -= 15
        method = "–∫–≤–∏—Ç–∫–∏"
    elif user['balance'] >= 1000:
        user['balance'] -= 1000
        method = "PulseCoins"
    elif user['referrals'] >= 25:
        user['referrals'] -= 25
        method = "–¥—Ä—É–∑—ñ"
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É–º–æ–≤ –¥–ª—è —É—á–∞—Å—Ç—ñ!")
        return

    user['lottery_participation'] = True
    save_data()
    bot.answer_callback_query(call.id, "‚úÖ –¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")

    try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        bot.send_message(ADMIN_ID, f"üéü –ù–æ–≤–∏–π —É—á–∞—Å–Ω–∏–∫ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: <b>{uname}</b>, —á–µ—Ä–µ–∑ {method}")
    except:
        pass


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É –≤—Ä—É—á–Ω—É
@bot.message_handler(commands=['run_lottery'])
def run_lottery(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –±–µ—Ä—É—Ç—å —É—á–∞—Å—Ç—å –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ
    participants = [user_id for user_id, data in users_data.items() if data['lottery_participation']]
    
    if not participants:
        return bot.reply_to(message, "‚ùå –ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")

    # –í–∏–±—ñ—Ä –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5 –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤)
    winners = random.sample(participants, min(5, len(participants)))
    
    # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    winners_info = []
    for winner in winners:
        try:
            user_info = bot.get_chat(winner)
            uname = f"@{user_info.username}" if user_info.username else user_info.first_name
            winners_info.append(f"{uname} (ID: {winner})")
            bot.send_message(winner, f"üéâ –¢–∏ –≤–∏–≥—Ä–∞–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à! –í—ñ—Ç–∞—î–º–æ! üéâ")
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é {winner}: {e}")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑ —É—Å—ñ—î—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    winners_text = "\n".join(winners_info)
    bot.send_message(ADMIN_ID, f"‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Å—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ:\n\n{winners_text}")
    
    # –û–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    bot.reply_to(message, f"‚úÖ –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–º–æ–∂—Ü—ñ –≤–∏–±—Ä–∞–Ω—ñ. –û—Å—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:\n\n{winners_text}")

@bot.message_handler(func=lambda m: m.text == 'üëØ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
def invite_friend(message):
    user_id = message.from_user.id
    ref_link = f"https://t.me/JackpotPulse_bot?start={user_id}"
    bot.send_message(message.chat.id,
        f"<b>üëØ –ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤!</b>\n\n"
        f"üîó –¢–≤–æ—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {ref_link}\n"
        f"‚úÖ –ó–∞ –∫–æ–∂–Ω–æ–≥–æ ‚Äî +20 PulseCoins\nüéØ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å 3 –¥–Ω—ñ ‚Äî —â–µ +10",
        reply_markup=main_keyboard)


@bot.message_handler(func=lambda m: m.text == 'üì¢ –°–ø–æ–Ω—Å–æ—Ä–∏ / –ù–æ–≤–∏–Ω–∏')
def sponsors_news(message):
    user_id = message.from_user.id
    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>‚ö†Ô∏è –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.</b>", reply_markup=main_keyboard)
        return

    text = "<b>üì¢ –ù–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏ —Ç–∞ –Ω–æ–≤–∏–Ω–∏:</b>"
    markup = telebot.types.InlineKeyboardMarkup()
    for ch in sponsor_channels:
        markup.add(telebot.types.InlineKeyboardButton(text=ch, url=f"https://t.me/{ch.strip('@')}"))
    markup.add(telebot.types.InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
    bot.send_message(message.chat.id, text, reply_markup=markup)


def update_daily_top5():
    global daily_top5
    sorted_users = sorted(users_data.items(), key=lambda x: x[1].get('referrals_today', 0), reverse=True)
    daily_top5 = sorted_users[:5]

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¢–æ–ø-5
@bot.message_handler(func=lambda m: m.text == '‚≠êÔ∏è –¢–æ–ø 5 –≥—Ä–∞–≤—Ü—ñ–≤')
def show_top_5(message):
    # –û–Ω–æ–≤–ª—é—î–º–æ –¢–æ–ø-5
    update_daily_top5()

    # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è
    text = "<b>üî• –©–æ–¥–µ–Ω–Ω–∏–π –¢–æ–ø 5 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤:</b>\n\n"
    for i, (uid, data) in enumerate(daily_top5, start=1):
        try:
            user_info = bot.get_chat(uid)
            uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        except:
            uname = str(uid)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ referrals_today –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        text += f"{i}. {uname} ‚Äî <b>{data.get('referrals_today', 0)}</b> —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤\n"

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¢–æ–ø-5
    bot.send_message(message.chat.id, text, reply_markup=main_keyboard)


@bot.message_handler(func=lambda m: m.text == 'üì£ –î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse')
def add_channel_request(message):
    bot.send_message(
        message.chat.id,
        "<b>üì£ –•–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–∞–Ω–∞–ª —É Jackpot Pulse?</b>\n\n"
        "–ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ –Ω–∞—à–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤:\n"
        "üë§ @vsi_promo_admin\n"
        "üë§ @oleksandra_managerr\n\n"
        "–í–æ–Ω–∏ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ –∑ —Ä–µ–∫–ª–∞–º–æ—é —Ç–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü–µ—é!",
        reply_markup=main_keyboard
    )


# –î–æ–¥–∞—î–º–æ –≥–æ—Ç–æ–≤—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏
ready_promos = {
    't6cz-xuk8-nhao-ejs6': {'value': 25, 'activations': 30},
    'qpwr-ckpw-iqnk-eo47': {'value': 20, 'activations': 30},
    'q3pf-xgb6-9owd-6vjt': {'value': 15, 'activations': 30},
    'nnf1-56z3-urzx-ocq3': {'value': 20, 'activations': 30},
    '1gpw-gvvh-n8ty-g4ds': {'value': 20, 'activations': 30},
    'cxae-68zk-3cs0-lyte': {'value': 15, 'activations': 30},
    '62j1-6zsh-j5i6-s8k7': {'value': 15, 'activations': 30},
    '74c2-eu9v-in1u-rtgh': {'value': 30, 'activations': 30},
    '8ttb-r3km-m0ol-lk7k': {'value': 25, 'activations': 30},
    'dygo-l42j-d6bj-5b38': {'value': 20, 'activations': 30},
    '9gt8-2zvl-tx3v-dsei': {'value': 25, 'activations': 30},
    'bipg-jvs8-n4qj-ppkk': {'value': 20, 'activations': 30},
    'ig2j-inlo-qbzw-o78i': {'value': 25, 'activations': 30},
    'spbx-ldu7-x9om-wfmb': {'value': 25, 'activations': 30},
    '4ocs-s1ig-164x-qyvk': {'value': 25, 'activations': 30},
    'mvod-y9tk-s2xf-uul9': {'value': 15, 'activations': 30},
    'bgcj-5duz-1iev-eqdh': {'value': 15, 'activations': 30},
    '0fiz-wki6-txmt-oppv': {'value': 15, 'activations': 30},
    'y9wg-xsr7-hhmz-i0bd': {'value': 30, 'activations': 30},
    '3hu6-s0de-8ona-xq81': {'value': 30, 'activations': 30},
    'fchg-t8a5-bqno-lksz': {'value': 20, 'activations': 30},
    'ox35-9qtm-c4qq-vkv5': {'value': 20, 'activations': 30},
    '1the-1rf8-aawk-6n4y': {'value': 20, 'activations': 30},
    'xqd7-clb4-9n49-zbyn': {'value': 30, 'activations': 30},
    '0mlm-tnix-wsqa-s10y': {'value': 15, 'activations': 30},
    'nl84-0s7e-c0ad-smuj': {'value': 15, 'activations': 30},
    'c4b8-sk3y-giw1-t6bq': {'value': 25, 'activations': 30},
    'tmym-xrl3-ztdh-kps4': {'value': 15, 'activations': 30},
    'suxe-i3cz-an5l-tbyo': {'value': 30, 'activations': 30},
    'tgt3-znkg-9mnr-ht08': {'value': 15, 'activations': 30},
    '7usj-k7zt-f4un-9ghp': {'value': 25, 'activations': 30},
    'y1qd-lua7-hkqt-ql11': {'value': 30, 'activations': 30},
    'cmd7-k6cw-7a1y-o0dm': {'value': 15, 'activations': 30},
    '3ipx-yrmk-wkd3-fvyk': {'value': 30, 'activations': 30},
    'z174-k22u-soyy-cwyv': {'value': 30, 'activations': 30},
    'isus-lx3b-vzv3-efib': {'value': 20, 'activations': 30},
    '3dkf-edm2-iyiq-1vxw': {'value': 20, 'activations': 30},
    's9g1-63ly-7oen-ftio': {'value': 25, 'activations': 30},
    'y52l-cwkz-1j64-rt47': {'value': 30, 'activations': 30},
    '93kl-2kvd-w6y5-bqmr': {'value': 30, 'activations': 30},
    '3syo-akh4-kq0m-egoc': {'value': 25, 'activations': 30},
    'r9qc-af7d-85cg-w397': {'value': 15, 'activations': 30},
    'q6fz-g4af-ywd5-jvnk': {'value': 25, 'activations': 30},
    'zz8h-7bmx-ke5y-a7k9': {'value': 15, 'activations': 30},
    'zeca-579k-l1b9-xotr': {'value': 20, 'activations': 30},
    'ejtu-ezos-i4sh-87fr': {'value': 25, 'activations': 30},
    'nt65-mglo-85gl-s72x': {'value': 30, 'activations': 30},
    'yii9-i4ck-bc4x-l5l8': {'value': 20, 'activations': 30},
    'f07a-4jvz-cmcb-yql9': {'value': 25, 'activations': 30},
    '2jw1-jv1n-a4bo-qey5': {'value': 25, 'activations': 30},
    'jifb-9rii-u5uz-9vly': {'value': 25, 'activations': 30},
    'c7jg-50wo-xrtu-3ca2': {'value': 20, 'activations': 30},
    'w6x4-5fz7-ktrt-xcd5': {'value': 15, 'activations': 30},
    '8l5a-2cxv-6388-l558': {'value': 30, 'activations': 30},
    'istt-hpw7-ycir-ccl1': {'value': 30, 'activations': 30},
    'jmln-yb5s-iv5f-d4w8': {'value': 15, 'activations': 30},
    '8kvm-fmxe-dzny-7odw': {'value': 20, 'activations': 30},
    'teuc-9hbs-m1gl-xm7w': {'value': 25, 'activations': 30},
    'h4mu-oxv1-cz2h-xssl': {'value': 25, 'activations': 30},
    'qj97-bu0x-coel-byq8': {'value': 20, 'activations': 30},
    'pijd-j2vy-chbw-as0i': {'value': 25, 'activations': 30},
    'tid5-eii7-25iy-ez7e': {'value': 25, 'activations': 30}
}

# –ó–∞–ø–∏—Å —É —Ñ–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤, —è–∫—â–æ —â–µ –Ω–µ —ñ—Å–Ω—É—î
if not os.path.exists(PROMO_FILE):
    with open(PROMO_FILE, "w") as f:
        json.dump(ready_promos, f, indent=4)

@bot.message_handler(func=lambda m: m.text == 'üíº –ë–∞–ª–∞–Ω—Å / –ü—Ä–æ–º–æ–∫–æ–¥')
def balance_or_promo(message):
    user_id = message.from_user.id
    if user_id not in users_data:
        return

    if not check_subscriptions(user_id):
        bot.send_message(user_id, "<b>‚ö†Ô∏è –°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=main_keyboard)
        return

    data = users_data[user_id]
    pulse_token = data.get('pulse_token', 0)
    missing = 500 - pulse_token

    text = (
        f"<b>üíº –¢–≤—ñ–π –±–∞–ª–∞–Ω—Å:</b>\n"
        f"ü™ô PulseCoins: {data['balance']}\n"
        f"üßß PulseToken (–ø—Ä–æ–º–æ–∫–æ–¥–∏): {pulse_token}\n\n"
        f"üí∏ –î–ª—è –≤–∏–≤–æ–¥—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 500 PulseToken"
    )

    if pulse_token < 500:
        text += f"\n‚ùóÔ∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å —â–µ {missing} PulseToken –¥–æ –≤–∏–≤–æ–¥—É"

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üí∏ –í–∏–≤–µ—Å—Ç–∏ 500 PulseToken", callback_data="withdraw_request"))
    markup.add(telebot.types.InlineKeyboardButton("üéü –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo"))

    bot.send_message(user_id, text, reply_markup=markup)

def can_user_withdraw(user_id):
    user = users_data.get(user_id, {})
    pulse_token = user.get('pulse_token', 0)
    referrals = user.get('referrals', 0)
    tasks_done = user.get('tasks_done_count', 0)
    streak = user.get('streak', 0)

    if pulse_token < 500:
        return False, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ PulseToken –¥–ª—è –≤–∏–≤–æ–¥—É. –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 500."

    if referrals < 20:
        return False, f"üë• –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 20 –¥—Ä—É–∑—ñ–≤ –¥–ª—è –≤–∏–≤–æ–¥—É. –£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑: {referrals}"

    if tasks_done < 5:
        return False, f"üìù –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 5 –∑–∞–≤–¥–∞–Ω—å. –£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑: {tasks_done}"

    if streak < 7:
        return False, f"üî• –ü–æ—Ç—Ä—ñ–±–Ω–æ –º–∞—Ç–∏ —Å—Ç—Ä—ñ–∫ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 7 –¥–Ω—ñ–≤. –£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑: {streak}"

    return True, ""


@bot.callback_query_handler(func=lambda call: call.data == "withdraw_request")
def withdraw_request(call):
    user_id = call.from_user.id
    now = int(time.time())
    user = users_data.get(user_id, {})
    last_withdraw = user.get('last_withdraw_request', 0)

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥
    allowed, reason = can_user_withdraw(user_id)
    if not allowed:
        bot.send_message(user_id, reason)
        return

    # ‚è≥ –û–¥–∏–Ω –≤–∏–≤—ñ–¥ –Ω–∞ 7 –¥–Ω—ñ–≤
    if now - last_withdraw < 7 * 86400:
        days_left = int((7 * 86400 - (now - last_withdraw)) / 86400)
        bot.send_message(user_id, f"‚è≥ –¢–∏ –≤–∂–µ –ø–æ–¥–∞–≤–∞–≤ –∑–∞—è–≤–∫—É. –ó–∞—á–µ–∫–∞–π —â–µ {days_left} –¥–Ω.")
        return

    bot.send_message(user_id, "üí≥ –í–≤–µ–¥–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –≤–∏–≤–æ–¥—É:")
    bot.register_next_step_handler(call.message, process_withdraw_details)


def process_withdraw_details(message):
    user_id = message.from_user.id
    details = message.text.strip()
    now = int(time.time())

    user = users_data.get(user_id, {})
    pulse_token = user.get('pulse_token', 0)

    if pulse_token < 500:
        bot.send_message(user_id, "‚ùå –£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ PulseToken.")
        return

    users_data[user_id]['pulse_token'] -= 500
    users_data[user_id]['last_withdraw_request'] = now
    save_data()

    try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
    except:
        uname = str(user_id)

    bot.send_message(ADMIN_ID, f"üîî <b>–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∏–≤—ñ–¥:</b>\n\n"
                               f"üë§ {uname}\n"
                               f"ID: <code>{user_id}</code>\n"
                               f"üì§ 500 PulseToken\n"
                               f"üìá –†–µ–∫–≤—ñ–∑–∏—Ç–∏: <code>{details}</code>")
    bot.send_message(user_id, "‚úÖ –ó–∞—è–≤–∫—É –Ω–∞ –≤–∏–≤—ñ–¥ –ø—Ä–∏–π–Ω—è—Ç–æ. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")



@bot.callback_query_handler(func=lambda call: call.data == "activate_promo")
def ask_promo_code(call):
    bot.send_message(call.message.chat.id, "üîê –í–≤–µ–¥–∏ —Å–≤—ñ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:")
    bot.register_next_step_handler(call.message, process_promo_code)


def process_promo_code(message):
    user_id = message.from_user.id

    if not check_subscriptions(user_id):
        bot.send_message(user_id, "‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥–∏ –∞–∫—Ç–∏–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏!")
        return

    promo_input = message.text.strip().lower()
    promo_data = load_promos()
    matched_key = next((k for k in promo_data if k.lower() == promo_input), None)

    if not matched_key:
        bot.send_message(user_id, "‚ùå –ù–µ–¥—ñ–π—Å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        return

    promo = promo_data[matched_key]

    if 'used_by' not in promo:
        promo['used_by'] = []

    if user_id in promo['used_by']:
        bot.send_message(user_id, "‚õîÔ∏è –¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥.")
        return

    if len(promo['used_by']) >= promo.get('activations', 1):
        bot.send_message(user_id, "üö´ –õ—ñ–º—ñ—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ–π —Ü—å–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥—É –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")
        return

    value = promo['value']
    users_data[user_id]['pulse_token'] = users_data[user_id].get('pulse_token', 0) + value
    promo['used_by'].append(user_id)

    save_data()
    promo_data[matched_key] = promo
    save_promos(promo_data)

    bot.send_message(user_id, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! +{value} PulseToken")

    try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
        bot.send_message(ADMIN_ID, f"üîî {uname} –∞–∫—Ç–∏–≤—É–≤–∞–≤ –ø—Ä–æ–º–æ–∫–æ–¥ {matched_key} (+{value} PulseToken)")
    except:
        pass

@bot.message_handler(func=lambda m: m.text == 'üìù –ó–∞–≤–¥–∞–Ω–Ω—è')
def task(message):
    user_id = message.from_user.id

    if user_id not in users_data:
        bot.send_message(message.chat.id, "<b>–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start</b>")
        return

    if not check_subscriptions(user_id):
        bot.send_message(message.chat.id, "<b>–°–ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–∞—à—ñ —Å–ø–æ–Ω—Å–æ—Ä—Å—å–∫—ñ –∫–∞–Ω–∞–ª–∏!</b>", reply_markup=get_channels_buttons())
        return

    if current_task.strip() == "‚ùóÔ∏è–ó–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.":
        bot.send_message(message.chat.id, "<b>‚ùóÔ∏è–ù–∞ –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.</b>")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ", callback_data=f"task_done_{user_id}"))

    bot.send_message(message.chat.id, f"<b>{current_task}</b>", reply_markup=markup)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –≤—Ä—É—á–Ω—É
@bot.message_handler(commands=['check_task'])
def check_task(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /check_task user_id")

    user_id = int(parts[1])

    if user_id not in users_data:
        return bot.reply_to(message, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")

    last_task_done = users_data[user_id].get("last_task_done", 0)
    if last_task_done > 0:
        bot.reply_to(message, f"–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤–∏–∫–æ–Ω–∞–Ω–æ! –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {last_task_done}")
    else:
        bot.reply_to(message, f"–ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —â–µ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ.")
# ‚¨áÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ" ‚Äî –∑–∞–ø–∏—Ç –Ω–∞–¥—Å–∏–ª–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—É


# ‚úÖ –ê–¥–º—ñ–Ω —Å—Ö–≤–∞–ª—é—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_task_"))
def approve_task(call):
    user_id = int(call.data.split("_")[2])
    now = int(time.time())

    if now - users_data[user_id].get("last_task_done", 0) < 10800:  # 3 –≥–æ–¥–∏–Ω–∏
        bot.answer_callback_query(call.id, "‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤–∏–∫–æ–Ω—É–≤–∞–≤ –∑–∞–≤–¥–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏.")
        return

    users_data[user_id]['pulse_token'] += current_task_reward
    users_data[user_id]['last_task_done'] = now

    # üî¢ –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
    users_data[user_id]['tasks_done_count'] = users_data[user_id].get('tasks_done_count', 0) + 1

    save_data()

    bot.send_message(user_id, f"‚úÖ –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{current_task_reward} PulseToken.")
    bot.answer_callback_query(call.id, "üéâ –ù–∞–≥–æ—Ä–æ–¥—É –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!")


@bot.callback_query_handler(func=lambda call: call.data.startswith("task_done_"))
def task_done_request(call):
    user_id = call.from_user.id

    if not check_subscriptions(user_id):
        bot.answer_callback_query(call.id, "‚ùå –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª–∏.")
        return

    now = int(time.time())
    last_request = users_data[user_id].get("last_task_request", 0)

    # ‚ùóÔ∏è –û–±–º–µ–∂–µ–Ω–Ω—è: —Ä–∞–∑ –Ω–∞ 3 –≥–æ–¥–∏–Ω–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç
    if now - last_request < 10800:
        bot.answer_callback_query(call.id, "‚è≥ –¢–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –∑–∞–ø–∏—Ç. –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏.")
        return

    users_data[user_id]['last_task_request'] = now
    save_data()

    bot.answer_callback_query(call.id, "üì® –ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É.")

    try:
        user_info = bot.get_chat(user_id)
        uname = f"@{user_info.username}" if user_info.username else user_info.first_name
    except:
        uname = str(user_id)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_task_{user_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_task_{user_id}")
    )

    bot.send_message(
        ADMIN_GROUP_ID,
        f"üì© <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è</b>\n"
        f"üë§ {uname}\nüÜî ID: <code>{user_id}</code>",
        reply_markup=markup
    )

# ‚ùå –ê–¥–º—ñ–Ω –≤—ñ–¥—Ö–∏–ª—è—î
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_task_"))
def reject_task(call):
    user_id = int(call.data.split("_")[2])
    bot.send_message(user_id, "‚ùå –ù–∞ –∂–∞–ª—å, —Ç–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ —Å—Ö–≤–∞–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    bot.answer_callback_query(call.id, "‚õîÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

@bot.message_handler(commands=['set_task'])
def set_task(message):
    if not is_admin(message):
        bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    content = message.text[9:].strip()
    if not content:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /set_task –¢–µ–∫—Å—Ç –∑–∞–≤–¥–∞–Ω–Ω—è || –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/set_task –ü—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @test || 40")
        return

    if '||' in content:
        parts = content.split('||')
        task_text = parts[0].strip()
        try:
            task_reward = int(parts[1].strip())
        except:
            bot.reply_to(message, "‚ùå –ü—ñ—Å–ª—è '||' –≤–∫–∞–∂–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—ñ–≤ (—á–∏—Å–ª–æ).")
            return
    else:
        task_text = content
        task_reward = 50  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    global current_task, current_task_reward
    current_task = task_text
    current_task_reward = task_reward

    with open(TASK_FILE, 'w', encoding='utf-8') as f:
        json.dump({"text": current_task, "reward": current_task_reward}, f, indent=4, ensure_ascii=False)

    bot.reply_to(message, f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ:\n<b>{current_task}</b>\nüí∞ –ù–∞–≥–æ—Ä–æ–¥–∞: {current_task_reward} PulseToken")


@bot.message_handler(commands=['send_promo'])
def ask_promo_text(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    chat_id = message.chat.id
    bot.send_message(chat_id, "‚úâÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤—Å—ñ–º:")
    bot.register_next_step_handler(message, lambda msg: send_promo_to_all(msg, chat_id))

def send_promo_to_all(message, reply_chat_id):
    if not is_admin(message):
        return

    promo_text = message.text.strip()
    count = 0

    for user_id in users_data.keys():
        try:
            bot.send_message(user_id, promo_text)
            count += 1
            time.sleep(0.1)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {user_id}: {e}")

    bot.send_message(reply_chat_id, f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

@bot.message_handler(commands=['notify_restart'])
def notify_restart(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    notification_text = "üö® –ë–æ—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ! –î–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start, —â–æ–± –∑–Ω–æ–≤—É –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –±–æ—Ç–∞!"
    
    for user_id in users_data.keys():
        try:
            bot.send_message(user_id, notification_text)
            time.sleep(0.1)  # –î–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
        except Exception as e:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
    
    bot.reply_to(message, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

@bot.message_handler(commands=['–¥–æ–¥–∞—Ç–∏_–ø—Ä–æ–º–æ'])
def add_new_promo(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    parts = message.text.strip().split()
    if len(parts) != 4:
        return bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–¥–æ–¥–∞—Ç–∏_–ø—Ä–æ–º–æ –ö–û–î –°–£–ú–ê –ê–ö–¢–ò–í–ê–¶–Ü–ô\n\n–ü—Ä–∏–∫–ª–∞–¥:\n/–¥–æ–¥–∞—Ç–∏_–ø—Ä–æ–º–æ summer-2025 50 100")

    _, code, value, limit = parts
    code = code.lower()

    try:
        value = int(value)
        limit = int(limit)
    except:
        return bot.reply_to(message, "‚ùå –°—É–º–∞ —ñ –ª—ñ–º—ñ—Ç –º–∞—é—Ç—å –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏.")

    promos = load_promos()
    if code in promos:
        return bot.reply_to(message, "‚ö†Ô∏è –¢–∞–∫–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤–∂–µ —ñ—Å–Ω—É—î.")

    promos[code] = {
        'value': value,
        'activations': limit,
        'used_by': []
    }

    save_promos(promos)
    bot.reply_to(message, f"‚úÖ –ù–æ–≤–∏–π –ø—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> –¥–æ–¥–∞–Ω–æ!\nüéÅ +{value} PulseToken\nüî¢ –õ—ñ–º—ñ—Ç: {limit} –∞–∫—Ç–∏–≤–∞—Ü—ñ–π")

    count = 0
    for user_id in users_data.keys():
        try:
            bot.send_message(user_id, promo_text)
            count += 1
            time.sleep(0.1)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è {user_id}: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫ (–º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ä–∞–∑ –Ω–∞ –≥–æ–¥–∏–Ω—É/–¥–µ–Ω—å)

def reset_user(user_id):
    if user_id in users_data:
        users_data[user_id]['balance'] = 0
        users_data[user_id]['pulse_token'] = 0
        users_data[user_id]['referrals'] = 0
        users_data[user_id]['tickets'] = 0
        users_data[user_id]['lottery_participation'] = False
        users_data[user_id]['last_bonus'] = 0
        users_data[user_id]['last_card'] = 0
        users_data[user_id]['streak'] = 0
        save_data()

def auto_check_subscriptions():
    while True:
        print("‚è± –ê–≤—Ç–æ–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–æ–∫...")
        now = int(time.time())

        for user_id in list(users_data.keys()):
            try:
                unsubscribed_channels = []

                for channel in sponsor_channels:
                    try:
                        chat = bot.get_chat(channel)
                        member = bot.get_chat_member(chat.id, user_id)
                        if member.status in ['left', 'kicked']:
                            unsubscribed_channels.append(channel)
                    except:
                        unsubscribed_channels.append(channel)

                if unsubscribed_channels:
                    if users_data[user_id].get('last_unsubscribed_time', 0) == 0:
                        users_data[user_id]['last_unsubscribed_time'] = now
                        print(f"[‚ùóÔ∏è] {user_id} –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –¢–∞–π–º–µ—Ä –ø—ñ—à–æ–≤.")
                        try:
                            bot.send_message(user_id, "<b>‚ö†Ô∏è –¢–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏. –Ø–∫—â–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω –Ω–µ –ø—ñ–¥–ø–∏—à–µ—à—Å—è ‚Äî –±–æ–Ω—É—Å–∏ –±—É–¥–µ —Å–∫–∏–Ω—É—Ç–æ.</b>")
                        except:
                            pass
                    elif now - users_data[user_id]['last_unsubscribed_time'] >= 172800:  # 48 –≥–æ–¥–∏–Ω
                        users_data[user_id]['last_unsubscribed_time'] = 0
                        print(f"[‚ö†Ô∏è] {user_id} –¥–æ—Å—ñ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –ø—ñ—Å–ª—è 48 –≥–æ–¥–∏–Ω. –ë–µ–∑ –¥—ñ–π.")
                        try:
                            bot.send_message(user_id, "<b>‚ö†Ô∏è –ú–∏–Ω—É–ª–æ 48 –≥–æ–¥–∏–Ω, –∞ —Ç–∏ –¥–æ—Å—ñ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –ë–µ–∑ –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∏ –Ω–µ –º–æ–∂–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤—ñ –±–æ–Ω—É—Å–∏.</b>")
                        except:
                            pass
                else:
                    if users_data[user_id].get('last_unsubscribed_time', 0) != 0:
                        users_data[user_id]['last_unsubscribed_time'] = 0
                        print(f"[‚úÖ] {user_id} –∑–Ω–æ–≤—É –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π. –¢–∞–π–º–µ—Ä –æ–±–Ω—É–ª–µ–Ω–æ.")

            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {user_id}: {e}")

        save_data()
        time.sleep(3600)  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ–≥–æ–¥–∏–Ω–∏


@bot.message_handler(commands=['–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏_–≤–∏–≤—ñ–¥'])
def check_withdraw_permission(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏_–≤–∏–≤—ñ–¥ user_id")

    try:
        user_id = int(parts[1])
    except:
        return bot.reply_to(message, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç user_id")

    if user_id not in users_data:
        return bot.reply_to(message, "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ.")

    allowed, reason = can_user_withdraw(user_id)

    if allowed:
        bot.reply_to(message, f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ú–û–ñ–ï –≤–∏–≤–æ–¥–∏—Ç–∏.")
    else:
        bot.reply_to(message, f"‚ùå –ù–ï –º–æ–∂–µ –≤–∏–≤–æ–¥–∏—Ç–∏:\n{reason}")


@bot.message_handler(commands=['–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏_–≤–∏–≤—ñ–¥'])
def confirm_withdrawal(message):
    if not is_admin(message):
        return

    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏_–≤–∏–≤—ñ–¥ user_id")
        return

    try:
        target_id = int(parts[1])
        bot.send_message(target_id, "‚úÖ –¢–≤–æ—é –∑–∞—è–≤–∫—É –Ω–∞ –≤–∏–≤—ñ–¥ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ. –û—á—ñ–∫—É–π –≤–∏–ø–ª–∞—Ç—É –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º!")
        bot.reply_to(message, "‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞. –ú–æ–∂–ª–∏–≤–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID.")


@bot.message_handler(commands=['–≤–∏–ø–ª–∞—á–µ–Ω–æ'])
def payout_done(message):
    if not is_admin(message):
        return

    parts = message.text.strip().split()
    if len(parts) != 2:
        bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–≤–∏–ø–ª–∞—á–µ–Ω–æ user_id")
        return

    try:
        target_id = int(parts[1])
        bot.send_message(target_id, "üíµ <b>–ö–æ—à—Ç–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!</b>\n–î—è–∫—É—î–º–æ –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è Jackpot Pulse! üé∞")
        bot.reply_to(message, "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ –≤–∏–ø–ª–∞—Ç—É.")
    except:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞. –ú–æ–∂–ª–∏–≤–æ, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID.")

@bot.message_handler(commands=['–æ–Ω–æ–≤–∏—Ç–∏_—Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤_—Å—å–æ–≥–æ–¥–Ω—ñ'])
def ensure_referrals_today(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    updated = 0
    for user_id, data in users_data.items():
        if 'referrals_today' not in data:
            users_data[user_id]['referrals_today'] = 0
            updated += 1

    save_data()
    bot.reply_to(message, f"‚úÖ –ü–æ–ª–µ 'referrals_today' –¥–æ–¥–∞–Ω–æ {updated} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.")

@bot.message_handler(commands=['–æ–Ω–æ–≤–∏—Ç–∏_–¥–∞–Ω—ñ'])
def update_user_fields(message):
    if message.from_user.id != ADMIN_ID:
        return

    count = 0
    for user_id, data in users_data.items():
        if 'tasks_done_count' not in data:
            data['tasks_done_count'] = 0
        if 'last_withdraw_request' not in data:
            data['last_withdraw_request'] = 0
        if 'streak' not in data:
            data['streak'] = 0
        if 'lottery_participation' not in data:
            data['lottery_participation'] = False
        count += 1

    save_data()
    bot.send_message(ADMIN_ID, f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")

@bot.message_handler(commands=['–æ–Ω–æ–≤–∏—Ç–∏_—Ç–æ–ø'])
def update_top_command(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    update_daily_top5()
    bot.reply_to(message, "‚úÖ –¢–æ–ø-5 –æ–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É.")

@bot.message_handler(commands=['–¥–æ–¥–∞—Ç–∏_–∫–∞–Ω–∞–ª'])
def add_channel(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    
    parts = message.text.strip().split()
    if len(parts) != 2:
        return bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–¥–æ–¥–∞—Ç–∏_–∫–∞–Ω–∞–ª @channel_username")
    
    channel = parts[1]
    if not channel.startswith('@'):
        return bot.reply_to(message, "‚ùå –ö–∞–Ω–∞–ª –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ @")
    
    if channel in sponsor_channels:
        return bot.reply_to(message, "‚ö†Ô∏è –¶–µ–π –∫–∞–Ω–∞–ª —É–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.")
    
    sponsor_channels.append(channel)
    bot.reply_to(message, f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö.")

@bot.message_handler(commands=['–≤–∏–¥–∞–ª–∏—Ç–∏_–∫–∞–Ω–∞–ª'])
def remove_channel(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
    
    parts = message.text.strip().split()
    if len(parts) != 2:
        return bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /–≤–∏–¥–∞–ª–∏—Ç–∏_–∫–∞–Ω–∞–ª @channel_username")
    
    channel = parts[1]
    if channel not in sponsor_channels:
        return bot.reply_to(message, "‚ùå –¶—å–æ–≥–æ –∫–∞–Ω–∞–ª—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É.")
    
    sponsor_channels.remove(channel)
    bot.reply_to(message, f"üóë –ö–∞–Ω–∞–ª {channel} –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")

@bot.message_handler(commands=['—Å–ø–∏—Å–æ–∫_–∫–∞–Ω–∞–ª—ñ–≤'])
def list_channels(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    if not sponsor_channels:
        return bot.reply_to(message, "‚ùóÔ∏è –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")

    text = "<b>üìã –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –∫–∞–Ω–∞–ª–∏:</b>\n" + "\n".join(sponsor_channels)
    bot.reply_to(message, text)

@bot.message_handler(commands=['—Å–∫–∏–Ω—É—Ç–∏_—Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤'])
def reset_referrals_today(message):
    if not is_admin(message):
        return bot.reply_to(message, "‚õîÔ∏è –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

    # –î–æ–¥–∞—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
    for user_id in users_data:
        # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
        users_data[user_id]['referrals'] += users_data[user_id].get('referrals_today', 0)
        
        # –ü–æ—Ç—ñ–º —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –∑–∞ –¥–µ–Ω—å
        users_data[user_id]['referrals_today'] = 0

    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¢–æ–ø-5 –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è
    update_daily_top5()

    save_data()  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
    bot.reply_to(message, "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª–∏ –∑–∞ –¥–µ–Ω—å –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ. –¢–æ–ø-5 –æ–Ω–æ–≤–ª–µ–Ω–æ.")



# –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–æ–∫
threading.Thread(target=auto_check_subscriptions, daemon=True).start()

@bot.message_handler(func=lambda message: True)
def debug_chat_id(message):
    print(f"Chat ID: {message.chat.id}")

# üü¢ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
bot.infinity_polling()









